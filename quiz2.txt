Problem 1

    This question will give you further practice with the Master Method. 
    Suppose the running time of an algorithm is governed by the recurrence 
    T(n)=7∗T(n/3)+n2. 
    What's the overall asymptotic running time (i.e., the value of T(n))?
    
    θ(n2.81)
    θ(nlog⁡n)
    θ(n2log⁡n)
    θ(n2)




Problem 2

    This question will give you further practice with the Master Method. 
    Suppose the running time of an algorithm is governed by the recurrence 
    T(n)=9∗T(n/3)+n2. 
    What's the overall asymptotic running time (i.e., the value of T(n))?
    
    θ(n3.17)
    θ(n2log⁡n)
    θ(nlog⁡n)
    θ(n2)




Problem 3

    This question will give you further practice with the Master Method. 
    Suppose the running time of an algorithm is governed by the recurrence 
    T(n)=5∗T(n/3)+4n. 
    What's the overall asymptotic running time (i.e., the value of T(n))?
    
    θ(nlog3⁡(5))
    θ(nlog⁡3log⁡5)
    θ(n2)
    θ(n2.59)
    θ(n5/3)
    θ(nlog⁡(n))




Problem 4 

    Consider the following pseudocode for calculating ab (where a and b are 
    positive integers)
    
    Here [x] denotes the floor function, that is, the largest integer less than
     or equal to x.
    
    Now assuming that you use a calculator that supports multiplication and 
    division (i.e., you can do multiplications and divisions in constant time), 
    what would be the overall asymptotic running time of the above algorithm 
    (as a function of b)?
    
    Θ(log⁡(b))
    Θ(b)
    Θ(blog⁡(b))
    Θ(b)




Problem 5 

    Choose the smallest correct upper bound on the solution to the following 
    recurrence: T(1)=1 and T(n)≤T([n])+1 for n>1. Here [x] denotes the "floor" 
    function, which rounds down to the nearest integer. 
    (Note that the Master Method does not apply.)

    O(n)
    O(log⁡n)
    O(1)
    O(loglog⁡n)