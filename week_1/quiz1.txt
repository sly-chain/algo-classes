Problem 1

    3-way-Merge Sort : Suppose that instead of dividing in half at each step of 
    Merge Sort, you divide into thirds, sort each third, and finally combine 
    all of them using a three-way merge subroutine. What is the overall 
    asymptotic running time of this algorithm? (Hint: Note that the merge step 
    can still be implemented in O(n) time.)

        n2log⁡(n)
        n(log⁡(n))2
        n
        nlog⁡(n)


Problem 2

    You are given functions f and g such that f(n)=O(g(n)). 
    Is f(n)∗log2(f(n)c)=O(g(n)∗log2(g(n)))? (Here c is some positive constant.) 
    You should assume that f and g are nondecreasing and always bigger than 1.
    
        Sometimes yes, sometimes no, depending on the constant c
        False
        True
        Sometimes yes, sometimes no, depending on the functions f and g


Problem 3 

    Assume again two (positive) nondecreasing functions f and g such that 
    f(n)=O(g(n)). Is 2f(n)=O(2g(n))? (Multiple answers may be correct, you 
    should check all of those that apply.)
        
        Sometimes yes, sometimes no (depending on f and g)
        Always
        Never
        Yes if f(n)≤g(n) for all sufficiently large n
    

Problem 4

    k-way-Merge Sort. Suppose you are given k sorted arrays, each with n 
    elements, and you want to combine them into a single array of kn elements. 
    Consider the following approach. Using the merge subroutine taught in 
    lecture, you merge the first 2 arrays, then merge the 3rd given array with 
    this merged version of the first two arrays, then merge the 4th given array 
    with the merged version of the first three arrays, and so on until you 
    merge in the final (kth) input array. What is the running time taken by 
    this successive merging algorithm, as a function of k and n? 
    (Optional: can you think of a faster way to do the k-way merge procedure ?)
    
        θ(nlog⁡(k))
        θ(nk2)
        θ(n2k)
        θ(nk)


Problem 5

    Arrange the following functions in increasing order of growth rate 
    (with g(n) following f(n) in your list if and only if f(n)=O(g(n))).
    
        a)22n
        b)2n2
        c)n2log⁡(n)
        d)n
        e)n2n

            Write your 5-letter answer, i.e., the sequence in lower case letters 
            in the space provided. For example, if you feel that the answer is 
            a->b->c->d->e (from smallest to largest), then type abcde in the 
            space provided without any spaces before / after / in between the 
            string.
            
            You can assume that all logarithms are base 2 
            (though it actually doesn't matter).
